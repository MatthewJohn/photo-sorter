#!/usr/bin/python

from PIL import Image
from PIL.ExifTags import TAGS
from datetime import datetime
import subprocess
from distutils.dir_util import mkpath
import os
import hashlib

SOURCE_DIR = '/Data/Media/unsorted/Photo'
DEST_DIR = '/Data/Media/Photos'

file_hashes = []

def get_exif(fn):
    ret = {}
    i = Image.open(fn)
    info = i._getexif()
    for tag, value in info.items():
        decoded = TAGS.get(tag, tag)
        ret[decoded] = value
    return ret

def md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

files = subprocess.check_output(['find', SOURCE_DIR, '-type', 'f', '-regex', '.*\.\(JPG\|GIF\|JPEG\|PNG\|jpg\|gif\|png\|jpeg\)'])
for file in files.split("\n"):
    print 'found file %s' % file
    try:
        exif_data = get_exif(file)
    except:
        print 'could not process %s' % file
        continue

    date_time = None
    date = None
    if 'DateTimeOriginal' in exif_data:
        date = exif_data['DateTimeOriginal']
    elif 'DateTime' in exif_data:
        date = exif_data['DateTime']
    elif 'DateTimeDigitized' in exif_data:
        date = exif_data['DateTimeDigitized']
    else:
        print 'Could not determine date for %s, using mtime' % file
        dt = os.path.getmtime(file)
        date_time = datetime.fromtimestamp(dt)

    if 'ExifImageHeight' in exif_data and int(exif_data['ExifImageHeight']) < 65:
        print 'Image too Small: %s' % file
        continue
    if 'ExifImageWidth' in exif_data and str(exif_data['ExifImageWidth']) < 65:
        print 'Image too Small: %s' % file
        continue

    try:
        if not date_time:
            date_time = datetime.strptime(str(date), '%Y:%m:%d %H:%M:%S')
    except:
        print 'Couldnt parse date time for %s: %s' % (file, date)
        continue

    dest_dir = '%s/%s/%s' % (DEST_DIR, date_time.year, date_time.month)
    md5sum = md5(file)
    index_key = '%s-%s-%s' % (date_time.year, date_time.month, md5sum)
    if index_key not in file_hashes:
        file_name = file.split('/')[-1]
        dest_filename = file_name

        filename_itx = 1
        while True:
            dest_path = '%s/%s' % (dest_dir, dest_filename)
            if not os.path.exists(dest_path):
                break
            filename_itx += 1
            dest_filename = '%s-%s.%s' % ('.'.join(file_name.split('.')[0:-1]), filename_itx, file_name.split('.')[-1])

        if not os.path.exists(dest_dir):
            mkpath(dest_dir)
            print 'creating dir %s' % dest_dir
        print 'copying %s to %s' % (file, dest_path)

        # determine free name
        os.symlink(file, dest_path)
        file_hashes.append(index_key)
    else:
        print 'Ignoring dupe: %s' % file


